<?xml version="1.0"?>
<project name="CIDemo" default="build" basedir="." xmlns="http://nant.sf.net/release/0.92/nant.xsd">

  <!-- This property should be set to true on the build server to change the flow of certain targets-->
  <property name="IsBuildServer" value="false"/>
  
  <!-- The build configuration used by MSBuild -->
  <property name="BuildConfiguration" value="Release"/>
  
  <!-- Paths to various tools-->
  <property name="MSBuild" value="C:\Program Files (x86)\MSBuild\14.0\Bin\msbuild.exe"/>
  <property name="MSTestExe" value="C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\mstest.exe"/>
  <property name="OpenCoverExe" value="packages\OpenCover.4.6.166\tools\OpenCover.Console.exe"/>
  
  <!--==============================================-->
  <!-- Main targets -->
  <!--==============================================-->

  <!-- Restore nuget packages -->
  <target name="packageRestore">
    
    <exec program=".nuget/NuGet.exe">
      <arg value="restore"/>
    </exec>
    
  </target>

  <!-- Build the solution -->
  <target name="build" depends="packageRestore">
    
    <exec program="${MSBuild}">
      <arg value="/p:Configuration=${BuildConfiguration}" />
      <arg value="/p:Platform=Any CPU" />
      <arg value="/t:Rebuild" />
      <arg value="CIDemo.sln" />
    </exec>
    
  </target>
  
  <!-- Run all unit tests -->
  <target name="test">
    
    <!-- Delete the test results directory -->
    <delete dir="TestResults"/>

    <!-- For each test project (except those that are excluded) run all unit tests -->
    <foreach item="Folder" property="foldername">
      <in>
        <items>
          <include name="*.Tests" />
          <exclude name="*.Web.Automation.Tests" />
        </items>
      </in>
      <do>
        <!-- Set the path to the test project dll that contains the tests-->
        <property name="dllName" value="${foldername}/bin/${BuildConfiguration}/${path::get-file-name(foldername)}.dll"/>

        <!-- Fail if testing dll does not exist -->
        <fail unless="${file::exists(dllName)}" message="Could not find DLL with unit tests: ${dllName}"/>

        <!-- Run unit tests for current project -->
        <exec program="${MSTestExe}">
          <arg value="/testcontainer:${dllName}"/>
        </exec>
        
      </do>
    </foreach>
    
  </target>

  <!-- Run code coverage on unit tests -->
  <target name="codeCoverage">
    
    <!-- Rebuild codecoverage directory -->
    <delete dir="codecoverage"/>
    <mkdir dir="codecoverage"/>

    <foreach item="Folder" property="foldername">
      <in>
        <items>
          <include name="*.Tests" />
          <exclude name="*.Web.Automation.Tests" />
        </items>
      </in>
      <do>
        <property name="dllName" value="${foldername}/bin/${BuildConfiguration}/${path::get-file-name(foldername)}.dll"/>
        <property name="projectName" value="${path::get-file-name(foldername)}"/>

        <!-- Fail if testing dll does not exist -->
        <fail unless="${file::exists(dllName)}" message="Could not find DLL with unit tests: ${dllName}"/>

        <!-- Run code coverage -->
        <exec program="${OpenCoverExe}">
          <arg value="-register:user"/>
          <arg value="-target:${MSTestExe}"/>
          <arg value="-targetargs:/testcontainer:${dllName}"/>
          <arg value="-output:codecoverage/${projectName}.Results.xml"/>
          <arg value="-filter:+[CIDemo.*]*" />
          <arg value="-filter:-[CIDemo.*.Tests]*" />
        </exec>
      </do>
    </foreach>
    
    <!-- Create the report from the results -->
    <exec program="packages\ReportGenerator.2.1.8.0\tools\ReportGenerator.exe">
      <arg value="-reports:codecoverage/*Results.xml"/>
      <arg value="-targetdir:codecoverage/"/>
    </exec>

    <!-- Launch the report unless we are on the build server -->
    <exec program="${environment::get-variable('ProgramFiles(x86)')}\Google\Chrome\Application\chrome.exe" unless="${IsBuildServer}">
      <arg value="${directory::get-current-directory()}\codecoverage\index.htm"/>
    </exec>
    
  </target>

  <target name="package">
    <delete dir="deploy" failonerror="false"></delete>
    <mkdir dir="deploy"></mkdir>
    
	<exec program="${MSBuild}">
      <arg value="/p:Configuration=${BuildConfiguration}" />
      <arg value="/t:Package" />
      <arg value="CIDemo.Web\CIDemo.Web.csproj" />
    </exec>

    <copy todir="deploy" overwrite="true">
      <fileset basedir="CIDemo.Web\obj\Release\Package">
        <include name="*.zip"/>
        <include name="*.cmd"/>
        <include name="*.SetParameters.xml" />
        <include name="*.SourceManifest.xml" />
      </fileset>
    </copy>
    
  </target>
  
  <!-- Deploy to the dev environment -->
  <target name="deployDev">
	<exec program="${MSBuild}">
      <arg value="/p:DeployOnBuild=true" />
      <arg value="/p:PublishProfile=DEV" />
      <arg value="CIDemo.Web\CIDemo.Web.csproj" />
    </exec>
  </target>

</project>